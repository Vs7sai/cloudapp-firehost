// Generated by view binder compiler. Do not edit!
package com.v7techsolution.interviewfire.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.cardview.widget.CardView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.v7techsolution.interviewfire.MarkdownTextView;
import com.v7techsolution.interviewfire.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityQuestionBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ScrollView answerScrollView;

  @NonNull
  public final TextView bookmarkIcon;

  @NonNull
  public final LinearLayout bottomNavigation;

  @NonNull
  public final Button btnBeginner;

  @NonNull
  public final Button btnMedium;

  @NonNull
  public final ImageView btnNext;

  @NonNull
  public final ImageView btnPrevious;

  @NonNull
  public final Button btnPro;

  @NonNull
  public final TextView difficultyText;

  @NonNull
  public final CardView explanationCard;

  @NonNull
  public final MarkdownTextView explanationText;

  @NonNull
  public final TextView progressText;

  @NonNull
  public final CardView questionCard;

  @NonNull
  public final AppCompatTextView questionText;

  @NonNull
  public final TextView scrollHint;

  @NonNull
  public final LinearLayout searchContainer;

  @NonNull
  public final EditText searchQuestionInput;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  @NonNull
  public final LinearLayout topBar;

  private ActivityQuestionBinding(@NonNull RelativeLayout rootView,
      @NonNull ScrollView answerScrollView, @NonNull TextView bookmarkIcon,
      @NonNull LinearLayout bottomNavigation, @NonNull Button btnBeginner,
      @NonNull Button btnMedium, @NonNull ImageView btnNext, @NonNull ImageView btnPrevious,
      @NonNull Button btnPro, @NonNull TextView difficultyText, @NonNull CardView explanationCard,
      @NonNull MarkdownTextView explanationText, @NonNull TextView progressText,
      @NonNull CardView questionCard, @NonNull AppCompatTextView questionText,
      @NonNull TextView scrollHint, @NonNull LinearLayout searchContainer,
      @NonNull EditText searchQuestionInput, @NonNull SwipeRefreshLayout swipeRefreshLayout,
      @NonNull LinearLayout topBar) {
    this.rootView = rootView;
    this.answerScrollView = answerScrollView;
    this.bookmarkIcon = bookmarkIcon;
    this.bottomNavigation = bottomNavigation;
    this.btnBeginner = btnBeginner;
    this.btnMedium = btnMedium;
    this.btnNext = btnNext;
    this.btnPrevious = btnPrevious;
    this.btnPro = btnPro;
    this.difficultyText = difficultyText;
    this.explanationCard = explanationCard;
    this.explanationText = explanationText;
    this.progressText = progressText;
    this.questionCard = questionCard;
    this.questionText = questionText;
    this.scrollHint = scrollHint;
    this.searchContainer = searchContainer;
    this.searchQuestionInput = searchQuestionInput;
    this.swipeRefreshLayout = swipeRefreshLayout;
    this.topBar = topBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityQuestionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityQuestionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_question, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityQuestionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.answer_scroll_view;
      ScrollView answerScrollView = ViewBindings.findChildViewById(rootView, id);
      if (answerScrollView == null) {
        break missingId;
      }

      id = R.id.bookmark_icon;
      TextView bookmarkIcon = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkIcon == null) {
        break missingId;
      }

      id = R.id.bottom_navigation;
      LinearLayout bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }

      id = R.id.btn_beginner;
      Button btnBeginner = ViewBindings.findChildViewById(rootView, id);
      if (btnBeginner == null) {
        break missingId;
      }

      id = R.id.btn_medium;
      Button btnMedium = ViewBindings.findChildViewById(rootView, id);
      if (btnMedium == null) {
        break missingId;
      }

      id = R.id.btn_next;
      ImageView btnNext = ViewBindings.findChildViewById(rootView, id);
      if (btnNext == null) {
        break missingId;
      }

      id = R.id.btn_previous;
      ImageView btnPrevious = ViewBindings.findChildViewById(rootView, id);
      if (btnPrevious == null) {
        break missingId;
      }

      id = R.id.btn_pro;
      Button btnPro = ViewBindings.findChildViewById(rootView, id);
      if (btnPro == null) {
        break missingId;
      }

      id = R.id.difficulty_text;
      TextView difficultyText = ViewBindings.findChildViewById(rootView, id);
      if (difficultyText == null) {
        break missingId;
      }

      id = R.id.explanation_card;
      CardView explanationCard = ViewBindings.findChildViewById(rootView, id);
      if (explanationCard == null) {
        break missingId;
      }

      id = R.id.explanation_text;
      MarkdownTextView explanationText = ViewBindings.findChildViewById(rootView, id);
      if (explanationText == null) {
        break missingId;
      }

      id = R.id.progress_text;
      TextView progressText = ViewBindings.findChildViewById(rootView, id);
      if (progressText == null) {
        break missingId;
      }

      id = R.id.question_card;
      CardView questionCard = ViewBindings.findChildViewById(rootView, id);
      if (questionCard == null) {
        break missingId;
      }

      id = R.id.question_text;
      AppCompatTextView questionText = ViewBindings.findChildViewById(rootView, id);
      if (questionText == null) {
        break missingId;
      }

      id = R.id.scroll_hint;
      TextView scrollHint = ViewBindings.findChildViewById(rootView, id);
      if (scrollHint == null) {
        break missingId;
      }

      id = R.id.search_container;
      LinearLayout searchContainer = ViewBindings.findChildViewById(rootView, id);
      if (searchContainer == null) {
        break missingId;
      }

      id = R.id.search_question_input;
      EditText searchQuestionInput = ViewBindings.findChildViewById(rootView, id);
      if (searchQuestionInput == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      id = R.id.top_bar;
      LinearLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      return new ActivityQuestionBinding((RelativeLayout) rootView, answerScrollView, bookmarkIcon,
          bottomNavigation, btnBeginner, btnMedium, btnNext, btnPrevious, btnPro, difficultyText,
          explanationCard, explanationText, progressText, questionCard, questionText, scrollHint,
          searchContainer, searchQuestionInput, swipeRefreshLayout, topBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
